#+TITLE: Notes About about the MPC journal paper
#+SETUPFILE: ~/.emacs.d/org-templates/level-0.org
#+PROPERTY: TEMPLATE page_math
#+PROPERTY: URL projects/mpc_j.html 
#+PROPERTY: SAVE_AS projects/mpc_j.html
#+OPTIONS: tex:t
#+STARTUP: latexpreview
#+TODO: TODO(t) WAITING(w@/!) | DONE(d@/!) CANCELED(c@/!) STARTED(s@/!) DEFERRED(ef@/!)
#+STARTUP: fold
#+STARTUP: lognotestate t
#+SEQ_TODO: TODO STARTED WAITING DELEGATED APPT | DONE DEFERRED CANCELLED


* Speed Comparison Tasks
** DONE modify to also save trajectories.
- State "DONE"       from "TODO"       [2018-01-12 Fri 16:50] \\
  That took forever. Most of today. These cell arrays and arrays of structs confuse me.
This needs to by done in 
*** DONE [[file:functions/find_ref_max.m]]
- State "DONE"       from "TODO"       [2018-01-12 Fri 16:51]
*** DONE [[file:functions/build_max_setpoints.m]] so that the trajectories are saved into the results.
- State "DONE"       from "TODO"       [2018-01-12 Fri 16:51]
** TODO plot percent increases against time-optimal for linear 
<2018-01-08 Mon 23:55>
** TODO plot percent increases against time-optimal for MPC 
<2018-01-08 Mon 23:56>

** DONE verify plotting of [[file:functions/StepParamsCLQR.m]]
- State "DONE"       from "TODO"       [2018-01-12 Fri 17:20] \\
  quick
** DONE add plotting to [[file:functions/StepParamsTimeOpt.m]]
- State "DONE"       from "TODO"       [2018-01-12 Fri 18:05]
** TODO subclass StepParams for build_max_setpoints.m??
and add plotting functions etc? Not sure its worth it at this point. 
** TODO new subclass or modofy [[file:functions/TsByMaxRefParams.m]] to include MPC
** TODO Finish the scheme to check if data has generated load/regenerate 
<2018-01-10 Wed 22:25>

** TODO Simulate TsByRefMax for MPC and create PLOTs
** TODO Bisect on ref-max vs gamma ??

* State Estimation Tasks
** TODO Try some of the LTR things. 
e.g., $\gamma BB^{T}$, $\gamma$ large  <2018-01-08 Mon 23:56>

* Quantifying the time savings (if any) of MPC and d-rated linear feedback
I have been trying to figure out how to quantify the time savings (if any) of using MPC vs a de-rated, saturated linear feedback. The basic idea is:

1. We start with a nominal $(Q,R)$ pair.
2. We determine how large we must make $\gamma R$ to visit a certain size of setpoint. In general, the larger $\gamma$ is, the larger the maximum setpoint we can visit is. This is what I mean by "de-rating" the feedback gain and is illustrated below in Figure [[fig:maxsplin]].

#+caption: The maximum achievable setpoint vs $\gamma$, for linear feedback derived from the nominal $(Q,R)$ pair. Generated with [[file:compare_maximum_ref.m]]
#+name: fig:maxsplin
#+ATTR_ORG: :width 300
[[file:figures/max_ref_delay_linonly.svg]]

Note that each point in that plot was generated by simulated the linear feedback law with saturation starting from a very small setpoint and incrementing larger (by 0.1 I think) until the output becomes unstable. 

So the questions I want to answer are:
1. Given a maximum setpoint $ref_{max}$, how much time do we *loose* by making $\gamma$ large? Said another way, what is the time penalalty for needing to visit larger setpoints (since this implies that $K$ must be "smaller")?
2. How does this time compare to what we can acheive with MPC?

The reason the second question is tricky is that we cannot implement MPC with an arbitrarily long time horizon. Nonetheless, lets think about the first question first. 

The way I think it makes sense to think about these questions is to compare the settling times to the optimal, constrained finite horizon (CLQR) open-loop settling time. At least for a given quadratic cost, that is the best settling time we can hope to achieve, and we won't run into the problems with MPC where need a larger control horizon to get stability. 

The point is: *Use the open-loop CLQR trajectoy as the baseline for all comparisons*[fn:time]

#+caption: For the optimal trajectories, the figure shows the settle time vs setpoint for several values of $\gamma$. Generated with [[file:compare_maximum_ref.m]]
#+name: fig:opt_set
#+ATTR_ORG: :width 350
[[file:figures/opttraj_setpoint_vs_ts.svg]]

Part of the point of Figure [[fig:opt_set]] is to verify that my intuition is generally correct that the settle-time should increase both as the setpoint becomes larger (obvisouly) and as $\gamma$ increases. Moreover, the results of Figure [[fig:opt_set]] justify using the small $\gamma=100$ as the baseline for comparison, i.e., we don't have to worry about comparing to #all# the $\gamma$. 

* The time penalty of linear saturated feedback and large setpoints

The idea here is to basically look in depth at a vertical cross section of Figure [[fig:maxsplin]]. 

My first attempt at this is shown in [[fig:linmaxset_comp]]. What this figure shows is what happens when we choose max setpoints
$$
ref_{max} = [1, 2, 3, 4.8]
$$

Recall that by specifying a maximum setpoint size we want to be able to visit, this implies a "smaller" feedback gain $K$ (or larger $\gamma$). 

#+caption: Comparison of max setpoints. Generated with [[file:compare_maximum_ref.m]]
#+name: fig:linmaxset_comp
[[file:figures/cp_clqropt_vs_linmaxset_TS-s.svg]]
# #+ATTR_HTML: :height 200

This doesn't look so good (for me). It might look more compelling if I plot it as percentage increase over CLQR. This is shown in Figure [[fig:perc_clqr]].


#+caption: The same data from [[fig:linmaxset_comp]] but shown as a percentage increase instead.
#+name: fig:perc_clqr
[[file:figures/perc_increase_lin_over_clqr.svg]]    

It is intersting (and in my opinion odd) that there is such a wild variation in the percentage increase in time, from essentiall 0% up to almost 60%. 
Note that the peaks in the two plots are *not* in the same location. The peak in Figure [[fig:perc_clqr]] occurs at about $r=2$, where, in Figure [[fig:linmaxset_comp]], the CLQR settle time is still down at about 5 ms, but the linear feedback settle time has increased to about 7.8 ms. This explains the discrepency in the data I talked about with Lucy this morning [2018-01-09 Tue].

On the one hand, this is what I expect for values of $\gamma$ there are near there stability boundary. In that case, the resulting saturated linear trajectory starts to decay in quality. But the part I find especially odd is the huge increase in the $\gamma=9035$ plot for setpoints around 2. It is clear (I think)  that we are not near the stability boundary for that value of $\gamma$, so why does the settle time increase so dramitically, and then fall back? 

I should plot a few of the output trajectories to investigate a little further. Such a comparison is shown below in Figure [[fig:cp_traj]].

#+caption: comparison of two trajectories. The dotted lines are the CLQR optimal trajectory for setpoints $r_{ref}=2.11$ and $r_{ref}=2.91$ for $\gamma=9035$.
#+name: fig:cp_traj
[[file:figures/cp_traj.svg]]

This is essentially as you would expect given the results of [[fig:perc_clqr]]. The question is, WHY does this occur? It is pretty interesting that the saturated + linear control has a lot more chattering going, which is clearly visible in the $\delta u(k)$ signal. Yet, for the setpoint $r_{ref} = 2.9$, this doesn't really affect the ouput that much. 

BTW, all of this is from git commit '4c8970d'

* Footnotes

[fn:time] Of course, we might also think about comparing to the *time-optimal* trajectory for each setpoint. That is something that should be done at some point, but it will require some caveats. The most pressing caveat is that we must delete the slow real pole-zero pair before computing the time-trajectory, because the time-optimal trajectory requires that the states be at steady state. If we don't do this, then the resulting time-optimal trajectory will have a comparitively very slow settling time.

 
