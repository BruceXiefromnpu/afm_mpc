#+TITLE: Notes About about the MPC journal paper
#+SETUPFILE: ~/.emacs.d/org-templates/level-0.org
#+PROPERTY: TEMPLATE page_math
#+PROPERTY: URL projects/mpc_j.html 
#+PROPERTY: SAVE_AS projects/mpc_j.html
#+OPTIONS: tex:t
#+STARTUP: latexpreview
#+OPTIONS: toc:nil
* Quantifying the time savings (if any) of MPC and d-rated linear feedback
I have been trying to figure out how to quantify the time savings (if any) of using MPC vs a de-rated, saturated linear feedback. The basic idea is:

1. We start with a nominal $(Q,R)$ pair.
2. We determine how large we must make $\gamma R$ to visit a certain size of setpoint. In general, the larger $\gamma$ is, the larger the maximum setpoint we can visit is. This is what I mean by "de-rating" the feedback gain and is illustrated below in Figure [[fig:maxsplin]].

#+caption: The maximum achievable setpoint vs $\gamma$, for linear feedback derived from the nominal $(Q,R)$ pair. Generated with [[file:compare_maximum_ref.m]]
#+name: fig:maxsplin
#+ATTR_ORG: :width 300
[[file:figures/max_ref_delay_linonly.svg]]

Note that each point in that plot was generated by simulated the linear feedback law with saturation starting from a very small setpoint and incrementing larger (by 0.1 I think) until the output becomes unstable. 

So the questions I want to answer are:
1. Given a maximum setpoint $ref_{max}$, how much time do we *loose* by making $\gamma$ large? Said another way, what is the time penalalty for needing to visit larger setpoints (since this implies that $K$ must be "smaller")?
2. How does this time compare to what we can acheive with MPC?

The reason the second question is tricky is that we cannot implement MPC with an arbitrarily long time horizon. Nonetheless, lets think about the first question first. 

The way I think it makes sense to think about these questions is to compare the settling times to the optimal, constrained finite horizon (CLQR) open-loop settling time. At least for a given quadratic cost, that is the best settling time we can hope to achieve, and we won't run into the problems with MPC where need a larger control horizon to get stability. 

The point is: *Use the open-loop CLQR trajectoy as the baseline for all comparisons*[fn:time]

#+caption: For the optimal trajectories, the figure shows the settle time vs setpoint for several values of $\gamma$. Generated with [[file:compare_maximum_ref.m]]
#+name: fig:opt_set
#+ATTR_ORG: :width 350
[[file:figures//opttraj_setpoint_vs_ts.svg]]

Part of the point of Figure [[fig:opt_set]] is to verify that my intuition is generally correct that the settle-time should increase both as the setpoint becomes larger (obvisouly) and as $\gamma$ increases. Moreover, the results of Figure [[fig:opt_set]] justify using the small $\gamma=100$ as the baseline for comparison, i.e., we don't have to worry about comparing to #all# the $\gamma$. 

* The time penalty of linear saturated feedback and large setpoints

The idea here is to basically look in depth at a vertical cross section of Figure [[fig:maxsplin]]. 

this
* Footnotes

[fn:time] Of course, we might also think about comparing to the *time-optimal* trajectory for each setpoint. That is something that should be done at some point, but it will require some caveats. The most pressing caveat is that we must delete the slow real pole-zero pair before computing the time-trajectory, because the time-optimal trajectory requires that the states be at steady state. If we don't do this, then the resulting time-optimal trajectory will have a comparitively very slow settling time.

